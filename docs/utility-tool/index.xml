<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ユーティリティー関数 on minoru&#39;s Emacs Configuration</title>
    <link>https://minorugh.github.io/.emacs.d/utility-tool/</link>
    <description>Recent content in ユーティリティー関数 on minoru&#39;s Emacs Configuration</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language><atom:link href="https://minorugh.github.io/.emacs.d/utility-tool/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>12.1. auto-delete</title>
      <link>https://minorugh.github.io/.emacs.d/utility-tool/auto-delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/utility-tool/auto-delete/</guid>
      <description>空になったファイルを自動的に削除 下記の設定をしておくと、C-x h で全選択して delete したあと kill-buffer することで自動的にファイルが削除されるので便利です。
(defun my:delete-file-if-no-contents () &amp;#34;Automatic deletion for empty files (Valid in all modes).&amp;#34; (when (and (buffer-file-name (current-buffer)) (= (point-min) (point-max))) (delete-file (buffer-file-name (current-buffer))))) (if (not (memq &amp;#39;my:delete-file-if-no-contents after-save-hook)) (setq after-save-hook (cons &amp;#39;my:delete-file-if-no-contents after-save-hook))) 開いているバッファーを閉じて当該ファイルを削除する やや危険なのであまりおすすめできませんが…
安全を期すために確認するようにはしてます。
(defun my:delete-this-file () &amp;#34;Delete the current file, and kill the buffer.&amp;#34; (interactive) (unless (buffer-file-name) (error &amp;#34;No file is currently being edited&amp;#34;)) (when (yes-or-no-p (format &amp;#34;Really delete &amp;#39;%s&amp;#39;?&amp;#34; (file-name-nondirectory buffer-file-name))) (delete-file (buffer-file-name)) (kill-this-buffer))) </description>
    </item>
    
    <item>
      <title>12.2. emacs-lok-mode</title>
      <link>https://minorugh.github.io/.emacs.d/utility-tool/emacs-lock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/utility-tool/emacs-lock/</guid>
      <description>Scratch バッファーを消さない 難しい関数を設定せずともビルトインコマンドで簡単に実現できます。
;; Set buffer that can not be killed (with-current-buffer &amp;#34;*scratch*&amp;#34; (emacs-lock-mode &amp;#39;kill)) (with-current-buffer &amp;#34;*Messages*&amp;#34; (emacs-lock-mode &amp;#39;kill)) </description>
    </item>
    
    <item>
      <title>12.3. ps-priter</title>
      <link>https://minorugh.github.io/.emacs.d/utility-tool/ps-print/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/utility-tool/ps-print/</guid>
      <description>PS-Printer での印刷 EmacsからPostscript経由で印刷する際の個人的な設定です。
Postscript 対応のプリンターが必要です。
(defalias &#39;ps-mule-header-string-charsets &#39;ignore) (setq ps-multibyte-buffer &#39;non-latin-printer ps-paper-type &#39;a4 ps-font-size 9 ;; ps-font-family &#39;Helvetica ps-font-family &#39;Courier ps-line-number-font &#39;Courier ps-printer-name nil ps-print-header nil ps-show-n-of-n t ps-line-number t ps-print-footer nil) </description>
    </item>
    
    <item>
      <title>12.4. open terminal</title>
      <link>https://minorugh.github.io/.emacs.d/utility-tool/terminal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/utility-tool/terminal/</guid>
      <description>gnome-terminal を Emacsから呼び出す Emacsで開いているbuffer のcurrent-dir で gnome-terminal を起動させます。
こちらを使うようになってからはeshell を使う機会が減りました。
(defun term-current-dir-open () &amp;#34;Open terminal application in current dir.&amp;#34; (interactive) (let ((dir (directory-file-name default-directory))) (compile (concat &amp;#34;gnome-terminal --working-directory &amp;#34; dir)))) (bind-key &amp;#34;&amp;lt;f4&amp;gt;&amp;#34; &amp;#39;term-current-dir-open) </description>
    </item>
    
    <item>
      <title>12.5. open thunar</title>
      <link>https://minorugh.github.io/.emacs.d/utility-tool/thunar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/utility-tool/thunar/</guid>
      <description>Thunarを Emacsから呼び出す Emacsで開いている buffer のcurrent-dir で Debian の Thuner を開きます。
使う機会は少ないと思いますが&amp;hellip;
(defun filer-current-dir-open () &amp;#34;Open filer in current dir.&amp;#34; (interactive) (compile (concat &amp;#34;Thunar &amp;#34; default-directory))) (bind-key &amp;#34;&amp;lt;f3&amp;gt;&amp;#34; &amp;#39;filer-current-dir-open) </description>
    </item>
    
    <item>
      <title>12.6. restart-emacs</title>
      <link>https://minorugh.github.io/.emacs.d/utility-tool/restart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/utility-tool/restart/</guid>
      <description>[rstert-emacs.el] Emacsを再起動させる 🔗 iqbalansari/restart-emacs: A simple emacs package to restart emacs from within emacs.
restart-emacs は、Emacsを再起動させるコマンドです。
C-u の数によって再起動の方法を制御できます。
 M-x restart-emacs 通常のEmacsを立ち上げる C-u M-x restart-emacs emacs &amp;ndash;debug-init C-u C-u M-x restart-emacs emacs -Q C-u C-u C-u M-x restart-emacs 引数を尋ねる  (leaf restart-emacs :ensure t :bind (&amp;#34;C-x C-c&amp;#34; . restart-emacs)) </description>
    </item>
    
    <item>
      <title>12.7. sudo-edit</title>
      <link>https://minorugh.github.io/.emacs.d/utility-tool/sudo-edit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/utility-tool/sudo-edit/</guid>
      <description>[sudo-edit.el] Root権限でファイルを開き直す 🔗 nflath/sudo-edit: Utilities for opening files with sudo.
sudo-edit.elは、現在アクセスしているファイルをsudoユーザーとして開きなおします。
(leaf sudo-edit :ensure t :bind (&amp;#34;C-c s&amp;#34; . sudo-edit)) sudo-edit-find-file というコマンドもあるようなのでお好みで…</description>
    </item>
    
  </channel>
</rss>
