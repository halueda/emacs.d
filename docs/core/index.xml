<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>コア設定 on minoru&#39;s Emacs Configuration</title>
    <link>https://minorugh.github.io/.emacs.d/core/</link>
    <description>Recent content in コア設定 on minoru&#39;s Emacs Configuration</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language><atom:link href="https://minorugh.github.io/.emacs.d/core/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2.1. language / coding</title>
      <link>https://minorugh.github.io/.emacs.d/core/encode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/core/encode/</guid>
      <description>シンプルにこれだけです。
(set-language-environment &amp;#34;Japanese&amp;#34;) (prefer-coding-system &amp;#39;utf-8) </description>
    </item>
    
    <item>
      <title>2.3. mozc</title>
      <link>https://minorugh.github.io/.emacs.d/core/mozc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/core/mozc/</guid>
      <description>Debianでの日本語入力環境構築が完了していることが前提です。
 Debian系の日本語入力をFcitx &amp;amp; Mozcにする  Mozcサーバーをインストール EmacsからMozcを使えるようにするには、まず mozc_emacs_helper をインストールする必要があります。 OSによって手法が異なりますが、Linuxの場合は簡単です。
$ sudo apt install emacs-mozc /user/bin/ に mozc_emacs_helper がインストールされていたらOKです。
Emacsでのインライン入力を無効にする デフォルトはC-\ で mozcが起動します。
Emacsでも &amp;lt;hiragana-katakana&amp;gt; でmozcのON/OFFをしたいので、Emacsでのインライン入力を無効にします。
方法は簡単で、~/.Xresources を作成して下記のように設定します。
! Emacs XIMを無効化 Emacs*useXIM: false 再起動をするか xrdb ~/.Xresources を実行することで設定が有効になります。
これで、&amp;lt;hiragana-katakana&amp;gt; を toggle-input-method に割り当てることができます。
[mozc.el] Mozcサーバーを使って日本語テキストを入力 🔗 google/mozc.el: Input Japanese text using Mozc server.
句読点などを入力したとき、自動的に確定させるように mozc-insert-str を定義しました。
(leaf mozc :ensure t :bind ((&amp;#34;&amp;lt;hiragana-katakana&amp;gt;&amp;#34; . toggle-input-method) (:mozc-mode-map (&amp;#34;,&amp;#34; . (lambda () (interactive) (mozc-insert-str &amp;#34;、&amp;#34;))) (&amp;#34;.</description>
    </item>
    
    <item>
      <title>2.4. server / emacsclient</title>
      <link>https://minorugh.github.io/.emacs.d/core/server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/core/server/</guid>
      <description>[server.el] クライアントサーバー emacsclient をよく使うので、Emacs起動時にビルトインの server を起動させています。
;; Server start for emacs-client (leaf server :require t :config (unless (server-running-p) (server-start))) </description>
    </item>
    
    <item>
      <title>2.5. exec-path-from-shell</title>
      <link>https://minorugh.github.io/.emacs.d/core/exec-path-from-shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/core/exec-path-from-shell/</guid>
      <description>[exec-path-from-shell.el] 設定をシェルから継承する 🔗 purcell/exec-path-from-shell: Make Emacs use the $PATH set up by the user&amp;rsquo;s shell
exec-path-from-shell は、シェルに設定した PATH の情報を継承して exec-path や PATH を設定してくれます。
(leaf exec-path-from-shell :ensure t :when (memq window-system &amp;#39;(mac ns x)) :hook (after-init-hook . exec-path-from-shell-initialize) :custom (exec-path-from-shell-check-startup-files . nil)) </description>
    </item>
    
    <item>
      <title>2.6. uniguify</title>
      <link>https://minorugh.github.io/.emacs.d/core/uniquify/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/core/uniquify/</guid>
      <description>[unquify.el] 同じバッファ名が開かれた場合に区別する ビルトインの uniquify は、同じバッファ名が開かれた場合に区別する設定です。
(setq uniquify-buffer-name-style &amp;#39;post-forward-angle-brackets) </description>
    </item>
    
    <item>
      <title>2.7. change gloal keybind</title>
      <link>https://minorugh.github.io/.emacs.d/core/change-keybind/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/core/change-keybind/</guid>
      <description>[cus-global-keybind] グローバルキーバインドをカスタマイズする グローバルキーバインドを自分好みにカスタマイズしています。
前準備としてクリップボードを使えるようにします。
;; Use the X11 clipboard (setq select-enable-clipboard t) マウスで選択した領域を自動コピー マウスで選択すると，勝手にペーストボードにデータが流れます．
(setq mouse-drag-copy-region t) C-w は、kill-ring-save に割り当てられたものですが、region 選択されていないときは、一行削除になるようにカスタマイズしてます。
C-x k の kill-buffer は、yes/no 確認されるのが煩わしいので、確認なしの kill-this-buffer を愛用しています。
;; Change global key bind (leaf cus-global-keybind :bind ((&amp;#34;M-w&amp;#34; . clipboard-kill-ring-save) (&amp;#34;C-w&amp;#34; . my:kill-whole-line-or-region) (&amp;#34;s-c&amp;#34; . clipboard-kill-ring-save) (&amp;#34;s-v&amp;#34; . clipboard-yank) (&amp;#34;M-/&amp;#34; . kill-this-buffer))) ;; Overwrite `C-w&amp;#39; to the whole-line-or-region (defun my:kill-whole-line-or-region () &amp;#34;If the region is active, to kill region. If the region is inactive, to kill whole line.</description>
    </item>
    
  </channel>
</rss>
