<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>カーソル移動 on minoru&#39;s Emacs Config</title>
    <link>https://minorugh.github.io/.emacs.d/cursor/</link>
    <description>Recent content in カーソル移動 on minoru&#39;s Emacs Config</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 29 Aug 2022 05:50:55 +0900</lastBuildDate><atom:link href="https://minorugh.github.io/.emacs.d/cursor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3.1. sequential-command</title>
      <link>https://minorugh.github.io/.emacs.d/cursor/sequential-command/</link>
      <pubDate>Mon, 29 Aug 2022 05:50:55 +0900</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/cursor/sequential-command/</guid>
      <description>[sequential-command.el] バッファーの先頭と最終行への移動を簡単に 🔗 https://github.com/HKey/sequential-command
sequential-command は、標準の C-a C-e を拡張し、バッファーの先頭と最終行への移動を簡単にしてくれます。
 C-a を連続で打つことで行頭→ページ先頭→元の位置とカーソルが移動 C-e を連続で打つことで行末→ページ最終行→元の位置とカーソルが移動  地味ながら一度使うと便利すぎて止められません。 MELPAからもインストールできますが、私は HKey氏の改良版を el-get でインストールしています。
(leaf sequential-command :doc &amp;#34;https://bre.is/6Xu4fQs6&amp;#34; :el-get HKey/sequential-command :config (leaf sequential-command-config :hook (emacs-startup-hook . sequential-command-setup-keys))) </description>
    </item>
    
    <item>
      <title>3.2. other-window-or-split</title>
      <link>https://minorugh.github.io/.emacs.d/cursor/other-window-or-sprit/</link>
      <pubDate>Mon, 29 Aug 2022 05:50:55 +0900</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/cursor/other-window-or-sprit/</guid>
      <description>画面分割時のカーソルの移動 other-window-or-split は、画面分割コマンド C-x 3 を拡張するもので、状況判断して画面移動の C-x o にもなります。
画面分割されていないときは、左右分割に加えて follow-mode dimmer-mode を ON にしています。（詳細後述）
画面分割と移動とを賢く判断してくれるのでとても便利です。
(defun other-window-or-split () &amp;#34;With turn on dimmer.&amp;#34; (interactive) (when (one-window-p) (split-window-horizontally) (follow-mode 1) (dimmer-mode 1)) (other-window 1)) (bind-key &amp;#34;C-q&amp;#34; &amp;#39;other-window-or-split) </description>
    </item>
    
    <item>
      <title>3.3. jump-brace</title>
      <link>https://minorugh.github.io/.emacs.d/cursor/jump-brace/</link>
      <pubDate>Mon, 29 Aug 2022 05:50:55 +0900</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/cursor/jump-brace/</guid>
      <description>括弧の先頭と最後へ交互にポイント移動 my:jump-brace は、括弧の先頭と最後へ交互にポイント移動します。
(defun my:jump-brace () &amp;#34;Jump to the corresponding parenthesis.&amp;#34; (interactive) (let ((c (following-char)) (p (preceding-char))) (if (eq (char-syntax c) 40) (forward-list) (if (eq (char-syntax p) 41) (backward-list) (backward-up-list))))) (bind-key &amp;#34;C-M-9&amp;#34; &amp;#39;my:jump-brace) 標準機能  C-M-SPC (mark-sexp) は、カーソル位置から順方向に選択 C-M-U (backward-up-list) は、一つ外のカッコの先頭にポイントを移す  標準機能はなにげに使いにくいです。</description>
    </item>
    
    <item>
      <title>3.4. exchange-point-and-mark</title>
      <link>https://minorugh.github.io/.emacs.d/cursor/mark-command/</link>
      <pubDate>Mon, 29 Aug 2022 05:50:55 +0900</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/cursor/mark-command/</guid>
      <description>直前の編集ポイントと現在のポイントとを行き来する設定 my:exchange-point-and-mark は、直前の編集ポイントと現在のポイントとを行き来できる設定です。
(defun my:exchange-point-and-mark () &amp;#34;No mark active `exchange-point-and-mark&amp;#39;.&amp;#34; (interactive) (exchange-point-and-mark) (deactivate-mark))	(bind-key &amp;#34;C-x C-x&amp;#34; &amp;#39;my:exchange-point-and-mark) </description>
    </item>
    
    <item>
      <title>3.5. expand-region</title>
      <link>https://minorugh.github.io/.emacs.d/cursor/expand-region/</link>
      <pubDate>Mon, 29 Aug 2022 05:50:55 +0900</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/cursor/expand-region/</guid>
      <description>[expand-refion.el] カーソル位置を起点に選択範囲を賢く広げてくれる 🔗 magnars/expand-region.el: Expand region increases the selected region.
expand-region.elは、カーソル位置を起点として選択範囲を広げてくれます。
2回以上呼ぶとその回数だけ賢く選択範囲が広がりますが、2回目以降はキーバインドの最後の一文字を連打すれば OKです。
その場合、選択範囲を狭める時は - を押し、0 を押せばリセットされます。
(leaf expand-region :ensure t :bind (&amp;#34;C-@&amp;#34; . er/expand-region)) </description>
    </item>
    
    <item>
      <title>3.6. point histry</title>
      <link>https://minorugh.github.io/.emacs.d/cursor/point-history/</link>
      <pubDate>Mon, 29 Aug 2022 05:50:55 +0900</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/cursor/point-history/</guid>
      <description>[point-history.el] 過去のカーソル位置を記憶・閲覧・選択・移動する 🔗 blue0513/point-history: Show the history of points you visited before.
過去に訪れた箇所の一覧をリストとして表示して、そこから戻りたい箇所を選択できます。 デフォルトは tab移動ですが変更しています。また、g でリスト画面が消えてくれるので、わかりやすくggで発動するようにキーバインドしています。
リスト上でポイントを移動させると、連動してビューバッファーを表示し対応位置をハイライトしてくれるところが優れものです。
(leaf point-history :el-get blue0513/point-history :hook (after-init-hook . point-history-mode) :chord (&amp;#34;gg&amp;#34; . point-history-show) ;; Since it disappears with `g&amp;#39; :bind ((:point-history-show-mode-map (&amp;#34;&amp;lt;SPC&amp;gt;&amp;#34; . point-history-next-line) (&amp;#34;b&amp;#34; . point-history-prev-line))) :custom (point-history-show-buffer-height . 15) :custom (point-history-ignore-buffer . &amp;#34;^ \\*Minibuf\\|^*\\|^ \\*point-history-show*\\|^magit\\|\]$&amp;#34;)) </description>
    </item>
    
  </channel>
</rss>
