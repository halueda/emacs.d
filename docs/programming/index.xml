<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>開発サポート on minoru&#39;s Emacs Config</title>
    <link>https://minorugh.github.io/emacs.d/programming/</link>
    <description>Recent content in 開発サポート on minoru&#39;s Emacs Config</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 29 Aug 2022 06:01:24 +0900</lastBuildDate><atom:link href="https://minorugh.github.io/emacs.d/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>10.1. function key</title>
      <link>https://minorugh.github.io/emacs.d/programming/function/</link>
      <pubDate>Mon, 29 Aug 2022 06:01:24 +0900</pubDate>
      
      <guid>https://minorugh.github.io/emacs.d/programming/function/</guid>
      <description>便利キーバインド 便利機能をワンキーアクションで使えるように設定しています。
キー コマンド 説明 F1 emacs help ivyで提供される便利機能 F2 imenu-list-smart-toggle imenuのサイドバー版 F3 filer-current-dir-open nautilusを開く F4 term-current-dir-open gonome-terminalを開く F5 quikuran お手軽ビルド F6 counsel-linux-app Linuxアプリランチャー F7 calendar-toggle カレンダーのトグル表示 F8 toggle-menu-bar-mode-from-frame menu-barのトグル表示 F9 display-line-numbers-mode 行番号のトグル表示 F10 neotree-toggle Neotreeのトグル表示 F11 toggle-frame-fullscreen Emacsの標準機能 F12 darkroom-mode darkroom-modeのトグル操作 home open-dashboard dashboardの再表示 end suspend-frame `Emacsの最小化 insert iedit-menu 文字列の置換え muhenkan minibuffer-keyboard-quit minibufferを閉じる S-RET toggle-scratch scratchのトグル表示 </description>
    </item>
    
    <item>
      <title>10.2. gist interface</title>
      <link>https://minorugh.github.io/emacs.d/programming/gist/</link>
      <pubDate>Mon, 29 Aug 2022 06:01:24 +0900</pubDate>
      
      <guid>https://minorugh.github.io/emacs.d/programming/gist/</guid>
      <description>Gistインターフェイス リスト管理などもできる gist.el というパッケージを使っていましたが、そもそもローカルで管理する必要がないから Gistを使うのだと思うので post 専用の簡単な関数を作りました。
gist をinstallしておく必要があります。
$ sudo apt install gist ターミナルで gist --help と打つと沢山の起動オプションが表示される。
gist -o でポスト後の結果の URLをブラウザで開いてくれるのでこれを採用した。
(leaf *gist-configurations :bind (&amp;#34;s-g&amp;#34; . gist-region-or-buffer) :init (defun gist-description () &amp;#34;Add gist description.&amp;#34; (code-quote-argument (read-from-minibuffer &amp;#34;Add gist description: &amp;#34;))) (defun gist-filename () &amp;#34;The character string entered in minibuffer is used as file-name. If enter is pressed without file-name, that&amp;#39;s will be buffer-file-neme.&amp;#34; (interactive) (let ((file (file-name-nondirectory (buffer-file-name (current-buffer))))) (read-from-minibuffer (format &amp;#34;File name (%s): &amp;#34; file) file))) (defun gist-region-or-buffer () &amp;#34;If region is selected, post from the region.</description>
    </item>
    
    <item>
      <title>10.3. flymake</title>
      <link>https://minorugh.github.io/emacs.d/programming/flymake/</link>
      <pubDate>Mon, 29 Aug 2022 06:01:24 +0900</pubDate>
      
      <guid>https://minorugh.github.io/emacs.d/programming/flymake/</guid>
      <description>[flymake] 構文エラー表示 ビルトインの flymake-mode が軽くて使いやすくなったので、flycheck から移行しました。
(leaf flymake :hook (prog-mode-hook . flymake-mode) :config (remove-hook &amp;#39;flymake-diagnostic-functions &amp;#39;flymake-proc-legacy-flymake) (leaf flymake-posframe :el-get Ladicle/flymake-posframe :hook (flymake-mode-hook . flymake-posframe-mode) :custom (flymake-posframe-error-prefix . &amp;#34; &amp;#34;))) </description>
    </item>
    
    <item>
      <title>10.4. quickrun</title>
      <link>https://minorugh.github.io/emacs.d/programming/quickrun/</link>
      <pubDate>Mon, 29 Aug 2022 06:01:24 +0900</pubDate>
      
      <guid>https://minorugh.github.io/emacs.d/programming/quickrun/</guid>
      <description>[quickrun.el] お手軽ビルド 🔗 emacsorphanage/quickrun: Run command quickly.
編集中のソースコードをビルド・実行して別バッファに結果を得ます。
open-junk-file でショートプログラムを書きながら、その都度 quickrun させて…という具合に使えて重宝です。
(leaf quickrun :ensure t :bind (&amp;#34;&amp;lt;f5&amp;gt;&amp;#34; . quickrun)) </description>
    </item>
    
    <item>
      <title>10.5. magit</title>
      <link>https://minorugh.github.io/emacs.d/programming/magit/</link>
      <pubDate>Mon, 29 Aug 2022 06:01:24 +0900</pubDate>
      
      <guid>https://minorugh.github.io/emacs.d/programming/magit/</guid>
      <description>[magit.el] Gitクライアント 🔗 magit/magit.el: Git user interface.
magit status は、デフォルトでは other-window に表示されますが、フルフレームで表示されるようにしました。
(leaf magit :ensure t :bind ((&amp;#34;M-g s&amp;#34; . magit-status) (&amp;#34;M-g b&amp;#34; . magit-blame) (&amp;#34;M-g t&amp;#34; . git-timemachine-toggle)) :hook (magit-post-refresh-hook . diff-hl-magit-post-refresh) :custom (transient-history-file . &amp;#34;~/.emacs.d/tmp/transient-history&amp;#34;) :init (leaf diff-hl	:ensure t :hook ((after-init-hook . global-diff-hl-mode) (after-init-hook . diff-hl-margin-mode))) (leaf git-timemachine	:ensure t) (leaf browse-at-remote :ensure t :custom (browse-at-remote-prefer-symbolic . nil))) (setq magit-display-buffer-function #&amp;#39;magit-display-buffer-fullframe-status-v1) </description>
    </item>
    
    <item>
      <title>10.6. git-timemachine</title>
      <link>https://minorugh.github.io/emacs.d/programming/git-timemachine/</link>
      <pubDate>Mon, 29 Aug 2022 06:01:24 +0900</pubDate>
      
      <guid>https://minorugh.github.io/emacs.d/programming/git-timemachine/</guid>
      <description>[git-timemachine.el] 🔗 emacsmirror/git-timemachine: Walk through git revisions of a file.
次のキーを使用して、ファイルの履歴バージョンをナビゲートしてくれます。
p 以前の履歴バージョンにアクセス n 次の履歴バージョンにアクセス w 現在の履歴バージョンの省略されたハッシュをコピー W 現在の履歴バージョンの完全なハッシュをコピー g n 番目のリビジョンに移動 t 選択したコミットメッセージでリビジョンに移動 q タイムマシンを終了 b 現在アクセスしているリビジョンでmagit-blame c magit を使用して現在のコミットを表示 (leaf git-timemachine	:ensure t) </description>
    </item>
    
    <item>
      <title>10.7. browse-at-point</title>
      <link>https://minorugh.github.io/emacs.d/programming/browse@point/</link>
      <pubDate>Mon, 29 Aug 2022 06:01:24 +0900</pubDate>
      
      <guid>https://minorugh.github.io/emacs.d/programming/browse@point/</guid>
      <description>[browse-at-remote.el] 🔗 rmuslimov/browse-at-remote: Browse target page on github/bitbucket from emacs buffers
browse-at-remote.el は、Git管理しているEmacsバッファーからgithubの特定リンクを瞬時に開くことができる優れものです。
(leaf browse-at-remote :ensure t :custom (browse-at-remote-prefer-symbolic . nil)) </description>
    </item>
    
    <item>
      <title>10.8. counsel-tramp</title>
      <link>https://minorugh.github.io/emacs.d/programming/tramp/</link>
      <pubDate>Mon, 29 Aug 2022 06:01:24 +0900</pubDate>
      
      <guid>https://minorugh.github.io/emacs.d/programming/tramp/</guid>
      <description>[counsel-tramp.el] 🔗 masasam/emacs-counsel-tramp: Tramp ivy interface for ssh and docker and ‎vagrant.
管理している俳句サイトのレンタルサーバーxsrverをチラ見するのに使っています。
サーバー上のファイルを直接編集するというのはまずないのですが、うっかり手元が滑って重要なファイルを触ってしまわないように view-mode で開くようにしています。
(leaf counsel-tramp :ensure t :hook (find-file-hook . my:auto-view) :custom `((tramp-persistency-file-name . ,&amp;#34;~/.emacs.d/tmp/tramp&amp;#34;) (tramp-default-method . &amp;#34;scp&amp;#34;) (counsel-tramp-custom-connections . &amp;#39;(/scp:xsrv:/home/minorugh/gospel-haiku.com/public_html/))) :config (add-to-list &amp;#39;my:auto-view-dirs &amp;#34;/scp:xsrv:/home/minorugh/&amp;#34;) (defun my:auto-view () &amp;#34;Open a file with view mode.&amp;#34; (when (file-exists-p buffer-file-name) (when (and my:auto-view-regexp (string-match my:auto-view-regexp buffer-file-name)) (view-mode 1)) (dolist (dir my:auto-view-dirs) (when (eq 0 (string-match (expand-file-name dir) buffer-file-name)) (view-mode 1))))) (defun my:tramp-quit () &amp;#34;Quit tramp, if tramp connencted.</description>
    </item>
    
    <item>
      <title>10.9. easy-hugo</title>
      <link>https://minorugh.github.io/emacs.d/programming/easy-hugo/</link>
      <pubDate>Mon, 29 Aug 2022 06:01:24 +0900</pubDate>
      
      <guid>https://minorugh.github.io/emacs.d/programming/easy-hugo/</guid>
      <description>[eagy-hugo.el] マルチブログ管理 masasam/emacs-easy-hugo: Emacs major mode for managing hugo.
Hugoで作成された複数のブログを管理するための Emacs メジャー モードです。
作者の @masasam さんが、私の多くの要望を受け入れて完成してくださいました。感謝！
静的サイトジェネレータ「Hugo」は、とても簡単に構築できるので、私の場合、公開ページの他にプライベートな書庫代わりとしても使っています。 数えたらなんと９個も…
minorugh.github.io をGitHub Pagesで公開しています。
(leaf easy-hugo :ensure t :bind ((&amp;#34;C-c C-e&amp;#34; . easy-hugo) (:easy-hugo-mode-map ([tab] . easy-hugo-no-help) (&amp;#34;o&amp;#34; . easy-hugo-open-basedir) (&amp;#34;r&amp;#34; . easy-hugo-rename) (&amp;#34;e&amp;#34; . my:edit-easy-hugo))) :config ;; Load custom function for evil-mode (load-file &amp;#34;~/.emacs.d/template/my:evil-easy-hugo.el&amp;#34;) :init ;; Main blog (=blog1) (setq easy-hugo-basedir &amp;#34;~/Dropbox/minorugh.com/snap/&amp;#34;) (setq easy-hugo-url &amp;#34;https://snap.minorugh.com&amp;#34;) (setq easy-hugo-sshdomain &amp;#34;xsrv&amp;#34;) (setq easy-hugo-root &amp;#34;/home/minorugh/minorugh.com/public_html/snap/&amp;#34;) (setq easy-hugo-previewtime &amp;#34;300&amp;#34;) (setq easy-hugo-bloglist &amp;#39;(;; blog2 setting ((easy-hugo-basedir .</description>
    </item>
    
    <item>
      <title>10.10. open-junk-file</title>
      <link>https://minorugh.github.io/emacs.d/programming/junk/</link>
      <pubDate>Mon, 29 Aug 2022 06:01:24 +0900</pubDate>
      
      <guid>https://minorugh.github.io/emacs.d/programming/junk/</guid>
      <description>[open-junk-file.el] 使い捨てファイルを書く、開く 🔗 rubikitch/open-junk-file: Write a disposable file.
ファイルは howmフォルダー ~/Dropbox/howm/junk/ に保存します。
そうすることで howm の検索機能が利用でき、 ローマ字（migemo）での日本語検索も可能になるのでとても便利です。
(leaf open-junk-file :ensure t :config (setq open-junk-file-format &amp;#34;~/Dropbox/howm/junk/%Y%m%d.&amp;#34;) (setq open-junk-file-find-file-function &amp;#39;find-file)) 直近の junkファイルを即開けるように open-last-junk-file を定義しました。
(leaf em-glob :require t :config (defvar junk-file-dir &amp;#34;~/Dropbox/howm/junk/&amp;#34;) (defun open-last-junk-file () &amp;#34;Open last created junk-file.&amp;#34; (interactive) (find-file (car (last (eelisp-extended-glob (concat (file-name-as-directory junk-file-dir) &amp;#34;*.*.*&amp;#34;))))))) </description>
    </item>
    
  </channel>
</rss>
