<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>編集サポート / 入力補助 on minoru&#39;s Emacs Configuration</title>
    <link>https://minorugh.github.io/.emacs.d/editing/</link>
    <description>Recent content in 編集サポート / 入力補助 on minoru&#39;s Emacs Configuration</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language><atom:link href="https://minorugh.github.io/.emacs.d/editing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>6.1. markdown-mode</title>
      <link>https://minorugh.github.io/.emacs.d/editing/markdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/editing/markdown/</guid>
      <description>[markdown-mode.el] markdownモード編集、入力支援 🔗 jrblevin/markdown-mode: Emacs Markdown Mode.
Markdown形式のテキストを編集するための主要なモードです。
(leaf markdown-mode :ensure t :mode (&amp;#34;\\.md\\&amp;#39;&amp;#34;) :custom `((markdown-italic-underscore . t) (markdown-asymmetric-header . t) (markdown-fontify-code-blocks-natively . t)) markdownファイルのプレビューには、emacs-livedownを使っています。 記事を書きながらライブでプレビュー出来るすぐれものです。
🔗 shime/emacs-livedown: Emacs plugin for Livedown.
$ npm install -g livedown でインストールできます。
emacs-livedown.elisp は、el-get でインストールします。
(leaf emacs-livedown :el-get shime/emacs-livedown :bind ((&amp;#34;C-c C-c p&amp;#34; . livedown-preview) (&amp;#34;C-c C-c k&amp;#34; . livedown-kill))) </description>
    </item>
    
    <item>
      <title>6.10. iedit</title>
      <link>https://minorugh.github.io/.emacs.d/editing/iedit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/editing/iedit/</guid>
      <description>[iedit.el] 選択領域を別の文字列に置き換える 🔗 victorhge/iedit: Modify multiple occurrences simultaneously.
バッファー内の複数箇所を同時に編集するツールです。
対象範囲を選択して C-; を押すとiedit-modeとなり、選択したキーワードが全てハイライト表示され、モードラインにキーワードの出現した回数が表示され、ミニバッファにもメッセージが表示されます。
ハイライトされた部分を編集すると、他のハイライトも同時に編集されるようになります。編集後、もう一度 C-; を押すと確定され iedet-modeを抜けます。
Emacsでは使うことのない &amp;lt;insert&amp;gt; にキーバインドして重宝しています。</description>
    </item>
    
    <item>
      <title>6.10. smartparens</title>
      <link>https://minorugh.github.io/.emacs.d/editing/smartparens/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/editing/smartparens/</guid>
      <description>[smartparens.el] 対応する括弧の挿入をアシスト 🔗 Fuco1/smartparens: Minor mode for Emacs that deals with parens pairs and tries to be smart about it.
設定がいまいちよくわからず、試行錯誤しましたが、
(require &#39;smartparens-config) を追加したところとても賢く機能するようになりました。
(leaf smartparens :ensure t :hook ((after-init-hook . smartparens-global-mode) (prog-mode-hook . turn-on-smartparens-mode)) :config (require &amp;#39;smartparens-config)) </description>
    </item>
    
    <item>
      <title>6.11. migemo</title>
      <link>https://minorugh.github.io/.emacs.d/editing/migemo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/editing/migemo/</guid>
      <description>[migemo.el] ローマ字のまま日本語をインクリメンタル検索可能にする。 🔗 emacs-jp/migemo: emacs migemo client.
migemo は元々 Ruby で書かれていたようですが，最近の Ruby では動かないので C 言語で再実装された cmigemo を使うのが一般的のよう。 aptでインストール。
$ sudo apt install cmigemo インストール完了したら、下記コマンドで実行できる事を確認しておきます。
$ cmigemo --help Emacsの設定は下記のとおりです。
(leaf migemo :ensure t :hook (after-init-hook . migemo-init) :when (executable-find &amp;#34;cmigemo&amp;#34;) :custom `((migemo-command . &amp;#34;cmigemo&amp;#34;) (migemo-dictionary . &amp;#34;/usr/share/cmigemo/utf-8/migemo-dict&amp;#34;))) [swiper-migemo.el] swiperでもmigemoを使う 🔗 tam17aki/swiper-migemo: Use ivy/counsel/swiper with migemo.
avy-migemo-e.g.swiper.el を使って出来ていたのですが、２年ほど前から更新が止まってしまっていて動きません。
つい最近、avy-migemo を使わない swiper-migemo.elを GitHubで見つけたので試した処、機嫌よく動いてくれています。 MELPAにはアップされていないみたいなので el-getで取得しています。
(leaf swiper-migemo :doc &amp;#34;https://github.com/tam17aki/swiper-migemo&amp;#34; :el-get tam17aki/swiper-migemo :config (global-swiper-migemo-mode +1)) </description>
    </item>
    
    <item>
      <title>6.12. selected</title>
      <link>https://minorugh.github.io/.emacs.d/editing/selected/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/editing/selected/</guid>
      <description>[selected.el] リージョン選択時のアクションを制御 🔗 Kungsgeten/selected.el: Keymap for when region is active.
選択領域に対するスピードコマンドです。
Emacsバッファーで領域を選択した後、バインドしたワンキーを入力するとコマンドが実行されます。
(leaf selected :ensure t :hook (after-init-hook . selected-global-mode) :bind (:selected-keymap (&amp;#34;;&amp;#34; . comment-dwim) (&amp;#34;c&amp;#34; . clipboard-kill-ring-save) (&amp;#34;s&amp;#34; . swiper-thing-at-point) (&amp;#34;t&amp;#34; . google-translate-auto) (&amp;#34;T&amp;#34; . chromium-translate) (&amp;#34;W&amp;#34; . my:weblio) (&amp;#34;k&amp;#34; . my:koujien) (&amp;#34;e&amp;#34; . my:eijiro) (&amp;#34;g&amp;#34; . my:google))) browse-urlで検索サイトで開く 検索結果を browse-url で表示させるユーザーコマンドは、検索 urlのフォーマットとさえわかれば、パッケージツールに頼らずともお好みのマイコマンドを作成できます。
(defun my:koujien (str) (interactive (list (my:get-region nil))) (browse-url (format &amp;#34;https://sakura-paris.org/dict/広辞苑/prefix/%s&amp;#34; (upcase (url-hexify-string str))))) (defun my:weblio (str) (interactive (list (my:get-region nil))) (browse-url (format &amp;#34;https://www.</description>
    </item>
    
    <item>
      <title>6.13. pangu-spacing</title>
      <link>https://minorugh.github.io/.emacs.d/editing/pangu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/editing/pangu/</guid>
      <description>[pangu-spacing.el] 漢字と英字の間にスペースを自動追加 🔗 coldnew/pangu-spacing: Add space between Chinese and English characters.
pangu-spacingは、漢字と英字の間にスペースを自動追加してくれます。 少しカスタマイズしました。
 英字の前方のみとし後方にはスペースは挿入しない。 半角数字は、対象から除外。  ;; Add space between full-width and half-width (leaf pangu-spacing :ensure t :after mozc :hook ((markdown-mode-hook text-mode-hook) . pangu-spacing-mode) :config (setq pangu-spacing-include-regexp (rx (or (and (or (group-n 3 (any &amp;#34;。，！？；：「」（）、&amp;#34;)) (group-n 1 (or (category japanese)))))) (group-n 2 (in &amp;#34;a-zA-Z&amp;#34;))))) </description>
    </item>
    
    <item>
      <title>6.14. font-awesome</title>
      <link>https://minorugh.github.io/.emacs.d/editing/fontawesome/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/editing/fontawesome/</guid>
      <description>[font-awesom.el] 絵文字フォント入力支援 🔗 krismolendyke/font-awesome.el: A simple library for using Font Awesome icons in Emacs.
Font-awesome の入力をcounsel で支援してくれる。
(leaf font-awesome :ensure t :bind (&amp;#34;s-f&amp;#34; . counsel-fontwesame)) </description>
    </item>
    
    <item>
      <title>6.2. veiw-mode</title>
      <link>https://minorugh.github.io/.emacs.d/editing/view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/editing/view/</guid>
      <description>[view-mode] ファイル閲覧モード（標準機能） view-mode はビルトインの機能です。
特定の拡張子に対して常に view-mode で開きたいときやgzされた elispソースを見るときに使います。
設定では、my:auto-view-dirs に追加したディレクトリのファイルを開くと連携して view-mode が有効になります．
(leaf view :hook (find-file-hook . my:auto-view) (server-visit-hook . my:unlock-view-mode) :chord (&amp;#34;::&amp;#34; . view-mode) :bind (:view-mode-map (&amp;#34;h&amp;#34; . backward-char) (&amp;#34;l&amp;#34; . forward-char) (&amp;#34;a&amp;#34; . beginning-of-buffer) (&amp;#34;e&amp;#34; . end-of-buffer) (&amp;#34;w&amp;#34; . forward-word) (&amp;#34;b&amp;#34; . scroll-down) (&amp;#34;c&amp;#34; . kill-ring-save) (&amp;#34;r&amp;#34; . xref-find-references) (&amp;#34;RET&amp;#34; . xref-find-definitions) (&amp;#34;x&amp;#34; . my:view-del-char) (&amp;#34;y&amp;#34; . my:view-yank) (&amp;#34;d&amp;#34; . my:view-kill-region) (&amp;#34;u&amp;#34; . my:view-undo) (&amp;#34;m&amp;#34; . magit-status) (&amp;#34;g&amp;#34; .</description>
    </item>
    
    <item>
      <title>6.3. web-mode</title>
      <link>https://minorugh.github.io/.emacs.d/editing/web-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/editing/web-mode/</guid>
      <description>[web-mode.el] HTML編集をサポート 🔗 fxbois/web-mode: Web template editing mode for Emacs.
タグ直打ちでHTML編集するならお勧めなのですが、私はあまり使っていません。
HTMLの内容を確認したり部分的に変更したり&amp;hellip;という程度の使い方です。
(leaf web-mode :ensure t :mode (&amp;#34;\\.js?\\&amp;#39;&amp;#34; &amp;#34;\\.html?\\&amp;#39;&amp;#34; &amp;#34;\\.php?\\&amp;#39;&amp;#34;) :custom `((web-mode-markup-indent-offset . 2) (web-mode-css-indent-offset . 2) (web-mode-code-indent-offset . 2))) </description>
    </item>
    
    <item>
      <title>6.4. yatex</title>
      <link>https://minorugh.github.io/.emacs.d/editing/yatex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/editing/yatex/</guid>
      <description>[yatex.el] LaTex編集 🔗 emacsmirror/yatex: Yet Another tex-mode for emacs. //野鳥//
Emacsの上で動作する LaTeX の入力支援環境です。
ごく一般的な設定例ですが、参考になるとしたら YateX.lpr コマンドでPDF作成からプレビューまでの手順を自動化している点でしょうか。
(leaf yatex :ensure t :mode (&amp;#34;\\.tex\\&amp;#39;&amp;#34; &amp;#34;\\.sty\\&amp;#39;&amp;#34; &amp;#34;\\.cls\\&amp;#39;&amp;#34;) :custom `((tex-command . &amp;#34;platex&amp;#34;) (dviprint-command-format . &amp;#34;dvpd.sh %s&amp;#34;) (YaTeX-kanji-code . nil) (YaTeX-latex-message-code . &amp;#39;utf-8) (YaTeX-default-pop-window-height . 15)) :config (leaf yatexprc :bind ((&amp;#34;M-c&amp;#34; . YaTeX-typeset-buffer) (&amp;#34;M-v&amp;#34; . YaTeX-lpr)))) YaTeX-lpr は、dviprint-command-format を呼び出すコマンドです。
dvipdfmx で PDF作成したあと、ビューアーを起動させて表示させるところまでをバッチファイル dvpd.sh に書き、
$ chmod +x dvpd.sh として実行権限を付与してからPATHの通ったところに置きます。
私は /usr/loca/bin に置いています。
#!/bin/sh name=$1 dvipdfmx $1 &amp;amp;&amp;amp; evince ${name%.</description>
    </item>
    
    <item>
      <title>6.5. darkroom</title>
      <link>https://minorugh.github.io/.emacs.d/editing/darkroom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/editing/darkroom/</guid>
      <description>[darkroom-mode.el] 執筆モード 🔗 joaotavora/darkroom: Simple distraction-free editing.
画面の余計な項目を最小限にして、文章の執筆に集中できるようにするパッケージです。
[F12] キーで IN/OUT をトグルしています。
darkroom-mode から抜けるときは、revert-buffer でもとに戻します。
yes/no確認を聞かれるのが煩わしいので my:revery-buffer-no-confirm の関数を作りました。
(leaf darkroom :ensure t :bind ((&amp;#34;&amp;lt;f12&amp;gt;&amp;#34; . my:darkroom-in) (:darkroom-mode-map (&amp;#34;&amp;lt;f12&amp;gt;&amp;#34; . my:darkroom-out))) :config (defun my:darkroom-in () &amp;#34;Enter to the `darkroom-mode&amp;#39;.&amp;#34; (interactive) (view-mode 0) (diff-hl-mode 0) (display-line-numbers-mode 0) (darkroom-tentative-mode 1) (setq-local line-spacing 0.4)) (defun my:darkroom-out () &amp;#34;Returns from `darkroom-mode&amp;#39;to the previous state.&amp;#34; (interactive) (my:linespacing) (darkroom-tentative-mode 0) (display-line-numbers-mode 1) (my:revert-buffer-no-confirm)) (defun my:revert-buffer-no-confirm () &amp;#34;Revert buffer without confirmation.</description>
    </item>
    
    <item>
      <title>6.6. ivy / counsel / swiper</title>
      <link>https://minorugh.github.io/.emacs.d/editing/ivy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/editing/ivy/</guid>
      <description>[ivy.el / counsel.el / swiper.el] Emacsの補完システム 🔗 abo-abo/swiper: Ivy - a generic completion frontend for Emacs, Swiper - isearch with an overview.
ivy は、helm と双璧を成す Emacsの補完システムです。
リスト表示された多くの選択肢から、自分が使いたいものを高速に絞り込んで効率良く選び出す… このシンプルかつ極めて重要なタスクを ivy が手助けしてくれます．
counsel.el をインストールすれば、ivy.el も swiper.el も一緒にインストールされるようです。
(leaf counsel :ensure t :defer-config (ivy-mode) :bind ((&amp;#34;C-r&amp;#34; . swiper-thing-at-point) (&amp;#34;C-s&amp;#34; . swiper-region) (&amp;#34;C-:&amp;#34; . counsel-switch-buffer) (&amp;#34;s-a&amp;#34; . counsel-ag) (&amp;#34;s-r&amp;#34; . counsel-rg) (&amp;#34;s-f&amp;#34; . counsel-fontawesome) (&amp;#34;M-x&amp;#34; . counsel-M-x) (&amp;#34;M-y&amp;#34; . counsel-yank-pop) (&amp;#34;C-x m&amp;#34; . counsel-mark-ring) (&amp;#34;C-x C-b&amp;#34; .</description>
    </item>
    
    <item>
      <title>6.7. yasunippets</title>
      <link>https://minorugh.github.io/.emacs.d/editing/yasnippets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/editing/yasnippets/</guid>
      <description>[yasnippets.el] テンプレート システム 🔗 joaotavora/yasnippet: Template system for Emacs.
yasnippetは、Emacsのテンプレートシステムです。省略形を入力すると、それが関数テンプレートに自動的に展開されます。
company と連携することでとても便利になります。
(leaf yasnippet :ensure t :hook (after-init-hook . yas-global-mode) :config (leaf yasnippet-snippets :ensure t)) </description>
    </item>
    
    <item>
      <title>6.8. company</title>
      <link>https://minorugh.github.io/.emacs.d/editing/company/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/editing/company/</guid>
      <description>[company.el] 入力補完機能を提供 🔗 company-mode/company.el: Modular completion framework.
キーをタイプした時点で自動的に補完候補が出てきて、ミスタイプを減らして入力効率を上げる優れた補完機能です。 同種のものに日本では auto-complete.el が有名ですが、昨今はcompany.el の方が一般化しているようです。
デフォルトは自動的に補完候補がポップアップしますが、煩わしければ、
(setq company-idle-delay nil) としておいて、company-complete で手動で発動できます。
(leaf company :ensure t :hook (after-init-hook . global-company-mode) :bind ((&amp;#34;C-1&amp;#34; . company-complete) (&amp;#34;C-&amp;lt;tab&amp;gt;&amp;#34; . company-yasnippet) (:company-active-map (&amp;#34;&amp;lt;tab&amp;gt;&amp;#34; . company-complete-common-or-cycle) (&amp;#34;&amp;lt;backtab&amp;gt;&amp;#34; . company-select-previous) (&amp;#34;&amp;lt;muhenkan&amp;gt;&amp;#34; . company-abort))) :custom `((company-transformers . &amp;#39;(company-sort-by-backend-importance)) (company-idle-delay . 0) (company-require-match . &amp;#39;never) (company-minimum-prefix-length . 2) (company-selection-wrap-around . t) (completion-ignore-case . t) (company-dabbrev-downcase . nil)) :config (defvar company-mode/enable-yas t &amp;#34;Enable yasnippet for all backends.</description>
    </item>
    
    <item>
      <title>6.9. key-chord</title>
      <link>https://minorugh.github.io/.emacs.d/editing/key-chord/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/editing/key-chord/</guid>
      <description>[key-chord.el] 同時押しでキーバインド 🔗 emacsorphanage/key-chord: Map pairs of simultaneously pressed keys to commands.
同時押しというキーバインドを提供します。
同時押しの許容時間、その前後で別のキーが押されていたら発動しない判断をする、みたいな設定をしている。
(leaf key-chord :ensure t :hook (after-init-hook . key-chord-mode) :chord ((&amp;#34;df&amp;#34; . counsel-descbinds) (&amp;#34;l;&amp;#34; . init-loader-show-log) (&amp;#34;@@&amp;#34; . howm-list-all) (&amp;#34;jk&amp;#34; . open-junk-file)) :custom `((key-chord-two-keys-delay . 0.25) (key-chord-safety-interval-backward . 0.1) (key-chord-safety-interval-forward . 0.15))) キーの同時押し判定は 0.15 秒で、それらのキーが押される直前の 0.1 秒以内、または直後の 0.15 秒に押されていたら発動しない、という設定にしている。
誤爆防止のためには試行錯誤しつつ「自分流」を追求するしかない。</description>
    </item>
    
  </channel>
</rss>
