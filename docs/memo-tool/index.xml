<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>メモ環境 on minoru&#39;s Emacs Config</title>
    <link>https://minorugh.github.io/.emacs.d/memo-tool/</link>
    <description>Recent content in メモ環境 on minoru&#39;s Emacs Config</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 29 Aug 2022 06:00:38 +0900</lastBuildDate><atom:link href="https://minorugh.github.io/.emacs.d/memo-tool/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>11.1. howm</title>
      <link>https://minorugh.github.io/.emacs.d/memo-tool/howm/</link>
      <pubDate>Mon, 29 Aug 2022 06:00:38 +0900</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/memo-tool/howm/</guid>
      <description>[howm.el] お手軽メモ環境 🔗 howm: Write fragmentarily and read collectively.
メモ書きに特化した使い方なのでhowm-menu は使わない。 howm-list-all の一覧画面をよく使うが、ここからでも [新規(c)] [検索(s)] ほか一連の howmコマンドは全て使える。
タイトルの行頭にタグ（memo: note: など）を自動挿入して howm-create出来るように設定していて色付もしている。。
(leaf howm :ensure t :hook (after-init-hook . howm-mode) :bind ((:howm-view-summary-mode-map ([backtab] . howm-view-summary-previous-section) (&amp;#34;&amp;lt;return&amp;gt;&amp;#34; . howm-view-summary-open) (&amp;#34;,&amp;#34; . my:howm-create-memo) (&amp;#34;t&amp;#34; . my:howm-create-tech))) :init (setq howm-view-title-header &amp;#34;#&amp;#34; howm-directory &amp;#34;~/Dropbox/howm&amp;#34; howm-file-name-format &amp;#34;%Y/%m/%Y%m%d%H%M.md&amp;#34;) :custom `((howm-view-split-horizontally . t) (howm-view-summary-persistent . nil) (howm-normalizer . &amp;#39;howm-sort-items-by-reverse-date) (howm-user-font-lock-keywords . &amp;#39;((&amp;#34;memo:&amp;#34; . (0 &amp;#39;compilation-error)) (&amp;#34;tech:&amp;#34; . (0 &amp;#39;compilation-info))))) :config (setq howm-template &amp;#39;(&amp;#34;# %title%cursor\n%date%file&amp;#34; &amp;#34;# memo: %cursor\n%date%file&amp;#34; &amp;#34;# tech: %cursor\n%date%file&amp;#34;)) (defun my:howm-create-memo () &amp;#34;Create by inserting tags automatically.</description>
    </item>
    
    <item>
      <title>11.2. org-capture</title>
      <link>https://minorugh.github.io/.emacs.d/memo-tool/org/</link>
      <pubDate>Mon, 29 Aug 2022 06:00:38 +0900</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/memo-tool/org/</guid>
      <description>[org-capture.el] ウエブページをキャプチャーする 🔗 sprig/org-capture-extension: A Chrome and firefox extension facilitating org-capture in emacs
メモ書きは、howmとorg-journalがメインなので、GTD目的で org-capture を使うことはないのですが、 Google-Chrome や Firefoxの拡張機能を使って、お気に入りURLやCODEをワンクリックでEmacsにキャプチャーできるので便利に使っています。 導入法は上記リンク先に詳しいです。
(leaf org :hook ((emacs-startup-hook . (lambda () (require &amp;#39;org-protocol))) (org-capture-mode-hook . delete-other-windows)) :chord (&amp;#34;;;&amp;#34; . org-capture) :bind ((&amp;#34;C-c a&amp;#34; . org-agenda) (&amp;#34;C-c c&amp;#34; . org-capture) (&amp;#34;C-c k&amp;#34; . org-capture-kill) (&amp;#34;C-c o&amp;#34; . org-open-at-point) (&amp;#34;C-c i&amp;#34; . org-edit-src-exit) (:org-mode-map (&amp;#34;C-c i&amp;#34; . org-edit-special))) :custom `((org-log-done . &amp;#39;time) (timep-use-speed-commands . t) (org-src-fontify-natively .</description>
    </item>
    
    <item>
      <title>11.3. org-journal</title>
      <link>https://minorugh.github.io/.emacs.d/memo-tool/journal/</link>
      <pubDate>Tue, 30 Aug 2022 19:35:34 +0900</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/memo-tool/journal/</guid>
      <description>[org-journal.el] ライフログを書く 🔗 bastibe/org-journal: A simple org-mode based journaling mode.
日記を書くためのモードらしい。使ってみて意外と優れもの。
一日に一枚、その日のファイルを生成して、エントリを作成すると時刻のスタンプとともに記録する場を設けてくれる。 org-modeと同じルールでタスク管理もできて、ファイルの拡張子を.orgにしておけば agendaにも反映してくれる。未達成だった昨日のTODOは、自動的に今日に持ち越してくれるというのが親切だ。
calender.elとの連動も具備していて、M-x calendar して j と打つと以下のコマンドが使える。
 d .. org-journal-display-entry &amp;hellip; 編集できる n .. org-journal-new-date-entry&amp;hellip; 選択した日付のエントリーを作成 r .. org-journal-read-entry &amp;hellip; 編集不可（read only）  ひとりTwitterという感じで気楽に使いたいので、自動的に執筆モードになるようにフックして快適である。
(leaf org-journal :doc &amp;#34;https://www.emacswiki.org/emacs/OrgJournal&amp;#34; :ensure t :chord (&amp;#34;;;&amp;#34; . hydra-journal/body) :bind ((:org-journal-mode-map (&amp;#34;&amp;lt;muhenkan&amp;gt;&amp;#34; . org-journal-save-entry-and-exit)) (&amp;#34;C-c j&amp;#34; . org-journal-new-entry) (&amp;#34;C-c t&amp;#34; . journal-file-today) (&amp;#34;C-c y&amp;#34; . journal-file-yesterday)) :custom `((org-journal-dir . &amp;#34;~/Dropbox/org/journal/&amp;#34;) (org-journal-file-format . &amp;#34;%Y%m%d.</description>
    </item>
    
    <item>
      <title>11.4. scratch-memo</title>
      <link>https://minorugh.github.io/.emacs.d/memo-tool/scratch/</link>
      <pubDate>Mon, 29 Aug 2022 06:00:38 +0900</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/memo-tool/scratch/</guid>
      <description>scratchバッファーを付箋として使う Emacsで作業中の編集画面から短期的なメモを気軽に書きたいので付箋代わりに *scratch*バッファーが使えるように設定してみた。
再起動しても*scratch* の内容が消えないように auto-save-buffers の *scratch* 自動保存機能を併用しています。
専用のパッケージもあるようです。
persistent-scratch.el: scratch バッファを永続化・自動保存・復元する
toggle-scratch は、編集中のバッファーとscratchとをトグルで切り替えます。
;; Scratch for sticky-memo (leaf *scratch-memo :after auto-save-buffers-enhanced :bind (&amp;#34;S-&amp;lt;return&amp;gt;&amp;#34; . toggle-scratch) :custom ((auto-save-buffers-enhanced-save-scratch-buffer-to-file-p . t) (auto-save-buffers-enhanced-file-related-with-scratch-buffer . &amp;#34;~/.emacs.d/tmp/scratch&amp;#34;)) :init (defun toggle-scratch () &amp;#34;Toggle current buffer and *scratch* buffer.&amp;#34; (interactive) (if (not (string= &amp;#34;*scratch*&amp;#34; (buffer-name))) (progn (setq toggle-scratch-prev-buffer (buffer-name)) (switch-to-buffer &amp;#34;*scratch*&amp;#34;)) (switch-to-buffer toggle-scratch-prev-buffer))) (defun read-scratch-data () (let ((file &amp;#34;~/.emacs.d/tmp/scratch&amp;#34;)) (when (file-exists-p file) (set-buffer (get-buffer &amp;#34;*scratch*&amp;#34;)) (erase-buffer) (insert-file-contents file)))) (read-scratch-data)) </description>
    </item>
    
  </channel>
</rss>
