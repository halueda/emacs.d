<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>フォント / 配色関連 on minoru&#39;s Emacs Configuration</title>
    <link>https://minorugh.github.io/.emacs.d/higlight/</link>
    <description>Recent content in フォント / 配色関連 on minoru&#39;s Emacs Configuration</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language><atom:link href="https://minorugh.github.io/.emacs.d/higlight/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>4.1. font setting</title>
      <link>https://minorugh.github.io/.emacs.d/higlight/font/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/higlight/font/</guid>
      <description>フォントの設定 メイン機: Thinkpad E590 とサブ機: X250 とでそれぞれに適した値を設定することで設定ファイルを共有しています。
(add-to-list &amp;#39;default-frame-alist &amp;#39;(font . &amp;#34;Cica-18&amp;#34;)) ;; for sub-machine (when (string-match &amp;#34;x250&amp;#34; (code-command-to-string &amp;#34;uname -n&amp;#34;)) (add-to-list &amp;#39;default-frame-alist &amp;#39;(font . &amp;#34;Cica-15&amp;#34;))) Cicaフォントとは Cicaフォントは、Hack、DejaVu Sans Mono、Rounded Mgen+、Noto Emoji等のフォントを組み合わせて調整をした、日本語の等幅フォントです。
 プログラミング用日本語等幅フォント Cica  フォントのインストール Linux 環境でのインストールの方法です。
オフィシャルページにある最新の Cica v5.03 は、 page-break-lines で表示が乱れます。
 ダウンロードページから、 Cica-v5.0.1.zip をダウンロードします。 zipファイルを展開します。 解凍したファイルを ~/.fonts/ にコピーします。  $ sudo cp Cica-{Bold,BoldItalic,Regular,RegularItalic}.ttf ~/.fonts/ $ sudo fc-cache -vf </description>
    </item>
    
    <item>
      <title>4.2. hl-line</title>
      <link>https://minorugh.github.io/.emacs.d/higlight/hl-line/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/higlight/hl-line/</guid>
      <description>カーソル行に色を付ける ビルトインの hl-line-mode を使ってカーソル行に色をつける設定です。
機能別にhl-line のON/OFF や色を変えたりという設定もできますが、 私の場合は、シンプルに global 設定して色は theme に依存というスタイルです。
(global-hl-line-mode 1) </description>
    </item>
    
    <item>
      <title>4.3. blink-cursor</title>
      <link>https://minorugh.github.io/.emacs.d/higlight/blink-cursor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/higlight/blink-cursor/</guid>
      <description>カーソルの点滅を制御 ビルトインの blink-cursor-mode を設定してカーソルの点滅を制御します。
以下の例では、入力が止まってから 10 秒後に 0.3 秒間隔で点滅します。次に入力が始まるまで点滅が続きます．
(setq blink-cursor-blinks 0) (setq blink-cursor-interval 0.3) (setq blink-cursor-delay 10) (add-hook &amp;#39;emacs-startup-hook . blink-cursor-mode) </description>
    </item>
    
    <item>
      <title>4.4. ivy-format-function-arrow</title>
      <link>https://minorugh.github.io/.emacs.d/higlight/ivy-format/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/higlight/ivy-format/</guid>
      <description>選択行をアイコンで強調 my:ivy-format-function-arrow は、ivy-mode の選択行をアイコンで強調する設定です。
(defun my:ivy-format-function-arrow (cands) &amp;#34;Transform into a string for minibuffer with CANDS.&amp;#34; (ivy--format-function-generic (lambda (str) (concat (if (display-graphic-p) (all-the-icons-octicon &amp;#34;chevron-right&amp;#34; :height 0.8 :v-adjust -0.05) &amp;#34;&amp;gt;&amp;#34;) (propertize &amp;#34; &amp;#34; &amp;#39;display `(space :align-to 2)) (ivy--add-face str &amp;#39;ivy-current-match))) (lambda (str) (concat (propertize &amp;#34; &amp;#34; &amp;#39;display `(space :align-to 2)) str)) cands &amp;#34;\n&amp;#34;)) (setq ivy-format-functions-alist &amp;#39;((t . my:ivy-format-function-arrow))) </description>
    </item>
    
    <item>
      <title>4.5. pare</title>
      <link>https://minorugh.github.io/.emacs.d/higlight/paren/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/higlight/paren/</guid>
      <description>対応するカッコをハイライトする ビルトインの paren.el を利用して対応する括弧をハイライトさせます。
(leaf paren :hook (after-init-hook . show-paren-mode) :custom `((show-paren-style . &amp;#39;parenthesis) (show-paren-when-point-inside-paren . t) (show-paren-when-point-in-periphery . t))) </description>
    </item>
    
    <item>
      <title>4.6. rainbow-delimiters</title>
      <link>https://minorugh.github.io/.emacs.d/higlight/rainbow-delimiters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/higlight/rainbow-delimiters/</guid>
      <description>[rainbow-delimiters.el] 対応するカッコに色を付ける 🔗 yanyingwang/rainbow-delimiters: Highlights delimiters such as parentheses.
複数のカッコが重なる言語では、カッコの対応関係がひと目で理解し難い場合があります。 rainbow-delimiters を使うと対応するカッコを七色に色付けして見やすくできます。
(leaf rainbow-delimiters :ensure t :hook (prog-mode-hook . rainbow-delimiters-mode)) </description>
    </item>
    
    <item>
      <title>4.7. rainbow-mode</title>
      <link>https://minorugh.github.io/.emacs.d/higlight/rainbow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/higlight/rainbow/</guid>
      <description>[rainbow-mode.el] バッファ内のカラーコードに実際の色をつける 🔗 emacsmirror/rainbow-mode: Colorize color names in buffers.
rainbow-mode.el は red, green などの色名や #aabbcc といったカラーコードを実際の色に表示してくれる。
global 設定にするとうざいと思うシーンもあるので、必要なときだけ使えるようにしています。
(leaf rainbow-mode :ensure t :bind (&amp;#34;C-c r&amp;#34; . rainbow-mode)) </description>
    </item>
    
    <item>
      <title>4.8. volatile-highlight</title>
      <link>https://minorugh.github.io/.emacs.d/higlight/volatile-highlights/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/higlight/volatile-highlights/</guid>
      <description>[volatile-highlights.el] コピペした領域を強調 🔗 k-talo/volatile-highlights.el: Highlighting copied area.
volatile-highlights.el は、コピペした領域を強調します。
設定は、コピペ直後の数秒に限定してコピペした領域をフラッシングさせます。
(leaf volatile-highlights :ensure t :hook (after-init-hook . volatile-highlights-mode) :config (when (fboundp &amp;#39;pulse-momentary-highlight-region) (defun my:vhl-pulse (beg end &amp;amp;optional _buf face) &amp;#34;Pulse the changes.&amp;#34; (pulse-momentary-highlight-region beg end face)) (advice-add #&amp;#39;vhl/.make-hl :override #&amp;#39;my:vhl-pulse))) </description>
    </item>
    
    <item>
      <title>4.9. whitespace</title>
      <link>https://minorugh.github.io/.emacs.d/higlight/whitespace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://minorugh.github.io/.emacs.d/higlight/whitespace/</guid>
      <description>[whitespace.el] 全角スペースを強調表示する 🔗 emacs/whitespace.el: visualize blanks (TAB, (HARD) SPACE and NEWLINE).
show-trailing-whitespace は、便利だけれどtext-modeなどでは多少うざいときもあるので prog-mode-hook で使っている。
ファイルの保存時に行末のスペースや末尾の改行を削除する
というTipsもありますが、自分は手動で削除できるようにしている。
(leaf whitespace :ensure t :bind (&amp;#34;C-c C-c&amp;#34; . my:cleanup-for-spaces) :hook (prog-mode-hook . my:enable-trailing-mode) :custom (show-trailing-whitespace . nil) :config (defun my:enable-trailing-mode () &amp;#34;Show tail whitespace.&amp;#34; (setq show-trailing-whitespace t)) (defun my:cleanup-for-spaces () &amp;#34;Remove contiguous line breaks at end of line + end of file.&amp;#34; (interactive) (delete-trailing-whitespace) (save-excursion (save-restriction (widen) (goto-char (point-max)) (delete-blank-lines))))) </description>
    </item>
    
  </channel>
</rss>
